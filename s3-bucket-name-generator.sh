#!/bin/bash

# 
# Generate an S3 bucket name that is hard to guess to mitigate DoS billing attack discussed in below article and thread. 
# 
# Usage: s3-bucket-name-generator.sh [ -t ]
# 
# OPTION
#        -t
#               Enforce S3 bucket name restriction when using Amazon S3 Transfer Acceleration, that is, no dots (.) allowed.
# 
# [How an empty S3 bucket can make your AWS bill explode | by Maciej Pocwierz | Apr, 2024 | Medium](https://medium.com/@maciej.pocwierz/how-an-empty-s3-bucket-can-make-your-aws-bill-explode-934a383cb8b1)
# [How an empty S3 bucket can make your AWS bill explode | Hacker News](https://news.ycombinator.com/item?id=40203126)
# [Bucket naming rules - Amazon Simple Storage Service](https://docs.aws.amazon.com/AmazonS3/latest/userguide/bucketnamingrules.html)
# 
# Using [Password Strength Tester](https://alecmccutcheon.github.io/Password-Entropy-Calculator/) with a randomly-selected password
# generated by this tool, we can roughly expect about 290 entropy bits as calculated by Claude Shannon's way of calculating it, 370
# entropy bits as calculated by the trigraph way of calculating it.  60-70 entropy bits is generally considered very strong, so this
# should be sufficient until cloud providers deliver a stronger defense.
# 
# Requires makepasswd(1) tool at [khorben/makepasswd: Makepasswd generates (pseudo-)random passwords of a desired length](https://github.com/khorben/makepasswd/),
# which is available in many distributions.
# 
#   In Red Hat Enterprise Linux, CentOS, Rocky Linux, Fedora and distributions that use dnf: sudo dnf install makepasswd
#   In Debian, Ubuntu, Mint, Elementary OS and distributions that use apt-get: sudo apt-get install makepasswd
#   In Arch Linux, Manjaro and distributions that use pacman: sudo pacman -S makepasswd
# 
# As of April 2024, we could not find makepasswd in NixOS packages searching at:
#   https://search.nixos.org/packages?channel=23.11&from=0&size=50&sort=relevance&type=packages&query=makepasswd
# Under NixOS, makepasswd(1) might need to be built and packaged from source. We opened Issue
#   https://github.com/NixOS/nixpkgs/issues/308030
# requesting packaging of makepasswd(1). Also not found in Homebrew at https://formulae.brew.sh/.
# 
# Home at https://github.com/automaticit-anthonyyen1/s3-bucket-name-generator, Issues and Pull Requests welcome.
# 

use_s3_transfer_acceleration=false
while getopts t opt ; do
  case "${opt}" in
    t) use_s3_transfer_acceleration=true ;;
    *) echo "FATAL: argument ${opt} not recognized, exiting..."
       exit 2
       ;;
  esac
done

s3_valid_bucket_name=false
while [ "${s3_valid_bucket_name}" = 'false' ] ; do
  # 
  # Must be 63 characters long
  # Must consist only of lowercase letters, numbers, dots (.), and hyphens (-).
  # Must begin and end with a letter or number
  candidate_s3_bucket_name=$( echo -n $( echo -n $( makepasswd -l 1 -c abcdefghijklmnopqrstuvwxyz0123456789 ) ;  echo -n $( makepasswd -l 61 -c abcdefghijklmnopqrstuvwxyz0123456789-. ) ; echo -n $( makepasswd -l 1 -c abcdefghijklmnopqrstuvwxyz0123456789 ) ) )
  # 
  # Must not contain two adjacent periods
  if   [ $( echo "${candidate_s3_bucket_name}" | grep -E '\.\.'                                           >/dev/null 2>&1 ; echo $? ) -eq 0 ] ; then
    s3_valid_bucket_name=false
    echo "Candidate ${candidate_s3_bucket_name=} rejected, has two adjacent periods" >&2
  # 
  # Must not be formatted as an IP address (for example, 192.168.5.4)
  elif [ $( echo "${candidate_s3_bucket_name}" | grep -E '[0-9]{1,3}\.[0-9]{1,3}'                         >/dev/null 2>&1 ; echo $? ) -eq 0 ] ; then
    s3_valid_bucket_name=false
    echo "Candidate ${candidate_s3_bucket_name=} rejected, has IP address fragment pattern" >&2
  # 
  # Must not start with the prefix xn--
  elif [ $( echo "${candidate_s3_bucket_name}" | grep -E '^xn--'                                          >/dev/null 2>&1 ; echo $? ) -eq 0 ] ; then
    s3_valid_bucket_name=false
    echo "Candidate ${candidate_s3_bucket_name=} rejected, starts with the prefix xn--" >&2
  # 
  # Must not start with the prefix sthree-
  elif [ $( echo "${candidate_s3_bucket_name}" | grep -E '^sthree-'                                       >/dev/null 2>&1 ; echo $? ) -eq 0 ] ; then
    s3_valid_bucket_name=false
    echo "Candidate ${candidate_s3_bucket_name=} rejected, starts with the prefix sthree-" >&2
  # 
  # Must not start with the prefix sthree-configurator
  elif [ $( echo "${candidate_s3_bucket_name}" | grep -E '^sthree-configurator'                           >/dev/null 2>&1 ; echo $? ) -eq 0 ] ; then
    s3_valid_bucket_name=false
    echo "Candidate ${candidate_s3_bucket_name=} rejected, starts with prefix sthree-configurator" >&2
  # 
  # Must not end with the suffix -s3alias
  elif [ $( echo "${candidate_s3_bucket_name}" | grep -E '-s3alias$'                                      >/dev/null 2>&1 ; echo $? ) -eq 0 ] ; then
    s3_valid_bucket_name=false
    echo "Candidate ${candidate_s3_bucket_name=} rejected, ends with the suffix -s3alias" >&2
  # 
  # Must not end with the suffix --ol-s3
  elif [ $( echo "${candidate_s3_bucket_name}" | grep -E '--ol-s3$'                                       >/dev/null 2>&1 ; echo $? ) -eq 0 ] ; then
    s3_valid_bucket_name=false
    echo "Candidate ${candidate_s3_bucket_name=} rejected, ends with the suffix --ol-s3" >&2
  # 
  # If using Amazon S3 Transfer Acceleration, can't have dots (.) in their names 
  elif [[ $( echo "${candidate_s3_bucket_name}" | grep -E '\.'                                            >/dev/null 2>&1 ; echo $? ) -eq 0 ]] && [[ "${use_s3_transfer_acceleration=false}" = 'true' ]] ; then
    s3_valid_bucket_name=false
    echo "Candidate ${candidate_s3_bucket_name=} rejected, flag for Amazon S3 Transfer Acceleration-compatible S3 bucket name detected, dot (.) detected in name" >&2
  else
    echo "${candidate_s3_bucket_name=}"
    s3_valid_bucket_name=true
  fi
done
